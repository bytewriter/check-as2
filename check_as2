#!/bin/bash
# this file: /usr/lib64/nagios/plugins/check_as2
# Mel - 2017-06-13 - monitor OpenAS2 for icinga
# Mel - 2017-06-23 - add ability to use a different startup script
# Mel - 2018-06-26 - fix grep error
# Mel - 2018-06-27 - fix midnight error, after midnight if no transactions, log file for today may not exist yet

version="2017-06-20"

if [[ "${BASH_VERSINFO[0]}" -lt 4 ]];then
    echo "Requires bash version >= 4"
    exit 1
fi

showver(){
    echo "$(basename $0) version $version"
}

usage(){
    showver
    cat << MEL
Usage:
  $(basename $0) [OPTION]... [OPTION]...

Options:
  -c INTEGER, --perhourcrit INTEGER, critical thresehold for per hour traffic
     defaults to $perhrcrit if not set.
  -w INTEGER, --perhourwarn INTEGER, warning thresehold for per hour traffic
     defaults to $perhrwarn if not set.
  -l PATH, --logdir PATH, set the path to the AS2 log files -- defaults to
     $as2logs if not set.
  -s SCRIPT, --as2script SCRIPT, set the as2script to look for in process list
     defaults to $as2script if not set.
  -h, --help  Show this help message.
  -V --version Show version information.
MEL
}

exitstatus=0
# set defaults, parse from arguments will override
logwarnhr=2
logwarnmin=0
logcrithr=3
logcritmin=0
perhrwarn=1200
perhrcrit=1800
# as2 startup script
as2script=/opt/OpenAS2_20100816/bin/mels-start
# as2 logs directory
as2logs=/opt/OpenAS2_20100816/config

while getopts ":c:w:l:s:-:hV" opt;do
    case $opt in
        w) perhrwarn=$OPTARG ;;
        c) perhrcrit=$OPTARG ;;
        h) usage;exit ;;
        l) as2logs=$OPTARG ;;
        s) as2script=$OPTARG ;;
        V)  showver;exit ;;
        -)
            case $OPTARG in
                help)           usage;exit ;;
                version)        showver;exit ;;
                perhourwarn)    perhrwarn=${!OPTIND};shift $OPTIND;OPTIND=1;;
                perhourwarn=*)  perhrwarn=${OPTARG##*=};;
                perhourcrit)    perhrcrit=${!OPTIND};shift $OPTIND;OPTIND=1;;
                perhourcrit=*)  perhrcrit=${OPTARG##*=};;
                logdir)         as2logs=${!OPTIND};shift $OPTIND;OPTIND=1;;
                logdir=*)       as2logs=${OPTARG##*=};;
                as2script)      as2script=${!OPTIND};shift $OPTIND;OPTIND=1;;
                as2script=*)    as2script=${OPTARG##*=};;
                *)  echo "Invalid long argument: --$OPTARG";usage;exit 1;;
            esac ;;
        \?) echo "Invalid short argument: -$OPTARG";usage;exit 1 ;;
        :)  echo "Argument -$OPTARG missing required value";usage;exit 1 ;;
        *)  echo "Not sure how I got here: \"-$opt $OPTARG\"";usage;exit 1 ;;
    esac
done

# check for script running
if [[ -f $as2script ]];then
    if [[ -z $(pidof -x $as2script) ]];then
        exitstatus=2
        critstring="AS2 process is not running"
    fi
else
    exitstatus=2
    critstring="Missing AS2 program: $as2script"
fi
# logs look like as2-YYYYMMDD.log because I have changed the logger FileLogger in config.xml to filename="%home%/as2-$date.yyyyMMdd$.log"/>
# read last hour of logs for perfdata
if [[ -d $as2logs ]];then
    # right after midnight log for today might not exist yet
    #lognow="$(ls -tr $as2logs/as2-*.log|tail -1)"
    lognow="$as2logs/as2-$(date +%Y%m%d).log"
    #logprev="$(ls -tr $as2logs/as2-*.log|tail -2|head -1)"
    logprev="$as2logs/as2-$(date -d now-1hour +%Y%m%d).log"
    logtemp=/tmp/as2log.$$
    minute="$(date +%M)"
    minuteones="${minute:1:1}"
    minutetens="${minute:0:1}"
    lasthour="$(date -d now-1hour +%H)"
    thishour="$(date +%H)"
    [[ $minuteones -eq 9 ]] || minuteones="[$minuteones-9]"
    # grepfor is for the previous hour
    grepfor="$minutetens$minuteones"
    
    # if tens of minutes is not 5, we will need more than $prevhour:5[$minute-9] (because 60 minutes)
    # example: for time= 04:23:xx, grepfor="03:(2[3-9]|[345][0-9]):"
    x=$minutetens
    if [[ $x < 5 ]];then
        while [[ $x < 5 ]];do
            ((x++))
            [[ -z $nexttensminute ]] && nexttensminute=$x || nexttensminute="$nexttensminute$x"
        done
        [[ ${#nexttensminute} -eq 1 ]] || nexttensminute="[$nexttensminute]"
        grepfor=" $lasthour:($grepfor|$nexttensminute[0-9]):"
    else
        grepfor=" $lasthour:$grepfor"
    fi
    # create a temp file that only has the last hour of logs
    touch $logtemp
    if [[ $lasthour == "23" ]];then
        [[ -f $logprev ]] && egrep -A999999 "$grepfor" $logprev >$logtemp
        [[ -f $lognow ]] && cat $lognow >>$logtemp
    else
        grepfor="$grepfor| $thishour:[0-5][0-9]:"
        [[ -f $lognow ]] && egrep -A999999 "$grepfor" $lognow >$logtemp
    fi
    inbounds="$(egrep 'received [0-9]+ bytes' $logtemp|wc -l)"
    outbounds="$(egrep 'transferred [0-9]+ bytes' $logtemp|wc -l)"
    totaltraffic=$((inbounds+outbounds))
    if [[ $totaltraffic -gt $perhrcrit ]];then
        exitstatus=2
        [[ -z $critstring ]] && critstring="greater than $perhrcrit traffic per hour" || critstring="$critstring, greater than $perhrcrit traffic per hour"
    elif [[ $totaltraffic -gt $perhrwarn ]];then
        [[ $exitstatus -lt 1 ]] && exitstatus=1
        [[ -z $warnstring ]] && warnstring="greater than $perhrwarn traffic per hour" || warnstring="$warnstring, greater than $perhrwarn traffic per hour"
    fi
    # check if last log entry is too old
    logdatetm="$(date -r $lognow +%Y%m%d%H%M)"
    warndatetm="$(date -d now-${logwarnhr}hours${logwarnmin}min +%Y%m%d%H%M)"
    critdatetm="$(date -d now-${logcrithr}hours${logcritmin}min +%Y%m%d%H%M)"
    if [[ $critdatetm -gt $logdatetm ]];then
        exitstatus=2
        crithrmsg="log is over $([[ $logcrithr -gt 0 ]] && echo $logcrithr hrs)$([[ $logcritmin -gt 0 ]] && echo $logcritmin mins) old"
        [[ -z $critstring ]] && critstring="$crithrmsg" || critstring="$critstring, $crithrmsg"
    elif [[ $warndatetm -gt $logdatetm ]];then
        [[ $exitstatus -lt 1 ]] && exitstatus=1
        warnhrmsg="log is over $([[ $logwarnhr -gt 0 ]] && echo "$logwarnhr hrs ")$([[ $logwarnmin -gt 0 ]] && echo "$logwarnmin mins")"
        [[ -z $warnstring ]] && warnstring="$warnhrmsg" || warnstring="$warnstring, $warnhrmsg"
    fi
else
    exitstatus=2
    [[ -z $critstring ]] && critstring="Missing directory: $as2logs" || critstring="$critstring, Missing directory: $as2logs"
fi

[[ -z $critstring ]] || critstring="CRIT: $critstring"
[[ -z $warnstring ]] || warnstring="WARN: $warnstring"
[[ -z $critstring ]] || exitstring="$critstring"
[[ -z $warnstring ]] || exitstring="$exitstring $warnstring"
perfdata=";| Inbound=$inbounds;$perhrwarn;$perhrcrit;0 Outbound=$outbounds;$perhrwarn;$perhrcrit;0 Total=$totaltraffic;$perhrwarn;$perhrcrit;0"
exitstring="$exitstring$perfdata" 
case $exitstatus in
    0)  echo "OK: $exitstring";;
    1)  echo "WARNING: $exitstring";;
    2)  echo "CRITICAL: $exitstring";;
    *)  echo "UNKNOWN: $exitstring";;
esac
[[ -f $logtemp ]] && /bin/rm -f $logtemp
exit $exitstatus

